/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "raycommon.glsl"
#include "wavefront.glsl"
#include "EntityConst.h"
#include "Model.h"

struct Ray
{
  vec3 origin;
  vec3 direction;
};
layout(set = 1, binding = eEntitiesVec3, scalar) buffer allEntitiesVec3_
{
  vec3 i[];
}
allEntitiesVec3;

layout(set = 1, binding = eEntitiesVec4, scalar) buffer allEntitiesVec4_
{
  vec3 i[];
}
allEntitiesVec4;

layout(set = 1, binding = eEntitiesModels, scalar) buffer allEntitiesModels_
{
  int i[];
}
allEntitiesModels;

layout(set = 1, binding = eModels, scalar) buffer allModel_
{
  Model i[];
}
allModels;

hitAttributeEXT vec3 attribs;



float hitSphere(const Sphere s, const Ray r)
{
  vec3  oc           = r.origin - s.center;
  float a            = dot(r.direction, r.direction);
  float b            = 2.0 * dot(oc, r.direction);
  float c            = dot(oc, oc) - s.radius * s.radius;
  float discriminant = b * b - 4 * a * c;
  if(discriminant < 0)
  {
    return -1.0;
  }
  else
  {
    return (-b - sqrt(discriminant)) / (2.0 * a);
  }
}

void main()
{


    reportIntersectionEXT(1,1);
return;
//gl_PrimitiveID for sub geometry
    int model = allEntitiesModels.i[gl_InstanceCustomIndexEXT];
    Model impl = allModels.i[model];
      Ray ray;
  ray.origin    = gl_WorldRayOriginEXT;
  ray.direction = gl_WorldRayDirectionEXT;

    Sphere sphere;
 //   sphere.center = (impl.AABB.MAX + impl.AABB.MIN) * 0.5;
    sphere.radius = impl.aabbdef.minimum.y - impl.aabbdef.maximum.y;
    sphere.radius = 5;
    sphere.center = allEntitiesVec3.i[gl_InstanceCustomIndexEXT + MaxEntities * Position_Interpolated];
    // Sphere intersection
   float tHit = hitSphere(sphere, ray);
  attribs = vec3(sphere.center/20.0);
  if(tHit>0)
    reportIntersectionEXT(tHit,1);
}