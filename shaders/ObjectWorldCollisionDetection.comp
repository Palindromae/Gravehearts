#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_ARB_shading_language_include  : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_atomic_int64 : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_buffer_reference2 : require
#extension GL_GOOGLE_include_directive : enable


#include "raycommon.glsl"
#include "wavefront.glsl"
#include "Physics_CubeTraceInfo.h"
#include "Physics_RayCollision.h"
#include "EntityConst.h"
#include "Model.h"
#include "ChunkGPUConst.h"
#include "Helpers/Rays.glsl"

#include "VoxelBrick.h"

#include "Helpers/ChunkHeaders.glsl"
#include "Helpers/GPUMemory.glsl"
#include "Helpers/RayMasks.glsl"
#include "Helpers/CollisionConst.glsl"

layout(set = 0, binding = 0)  buffer  PhysicsVec3N{
    vec3[] PhysicsVec3;
};

layout(set = 1, binding = 0)  buffer  PhysicsVec4N{
    vec4[] PhysicsVec4;
};

layout(set = 2, binding = 0)  buffer  activeIDsN{
    int[] IDs;
};

layout(set = 3, binding = 0)  buffer  Entity_modelsN{
    int[] entity_models;
};

layout(set = 4, binding = 0)  buffer  modelsN{
    Model[] models;
};
layout(set = 5, binding = 0) uniform accelerationStructureEXT ChunkTlas;

layout(set = 6, binding = 0)  buffer  collisionsN{
    PhysicsRayCollision[] collisions;
};

layout(set = 7, binding = 0) buffer Headers_ { ChunkHeader ChunkHeaders[]; };
layout(set = 8, binding = 0) buffer GPUMemory_ { VoxelBrick GPUMemory[]; };

shared float HitDistances[64];
shared vec3 HitPosition[64];
shared vec3 SelfHitPosition[64];
uint ptr_stack[MaxQuality+1];
uint current_childPtr;
ivec3 SVOPosition;

//#Insert VolumeTracer.glsl

//#Insert SVORaytracer.glsl


layout (push_constant) uniform constant
{
	int a;
};


// Dipatch raytrace for .comp files and for short distances
bool RaytraceDispatch(Ray ray, float MaxDistance, int RaySize, const TracingPackage info, inout float currentDistance, out RayHit Actual){
    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, ChunkTlas,
                          gl_RayFlagsTerminateOnFirstHitEXT,
                          0xff, ray.position, 0.00001, ray.direction, MaxDistance);

    vec3 position = ray.position;
    float dist = 999999;
    while(rayQueryProceedEXT(rayQuery)) {
        uint ChunkVolumeID = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, false);
        
        uint index = ChunkHeaderIndex(ivec3(position/chunk_dimensions));
        RayHit hit;
        ChunkHeader header = ChunkHeaders[ChunkVolumeID];

        for(int i = 0; i<64; i++){

	        if(RaytraceDistanceLimited_ConeTrace_World(ray, info, RaySize, ChunkVolumeID, index, currentDistance, MaxDistance, hit)) {

                if(dist<hit._distance)
                {
		            rayQueryGenerateIntersectionEXT(rayQuery, hit._distance);
                    Actual = hit;
                    dist = hit._distance;
                }
                continue;
	        } 

	        if(!TraceNext(ray, position, info, index))
		        continue;
		
        }

    }

    return dist == 999999;
}

float xysum(vec2 a)
{
    return a.x + a.y;
}

vec2 MaxedOutPlaneRays(vec2 RaysForPlane, const vec2 dimensions, out int RaySize){
   
    int axiiMin = int(min(RaysForPlane.x,RaysForPlane.y));
    ivec2 mask = ivec2(step(RaysForPlane.yx,RaysForPlane.xy)); // Which is bigger


   if(axiiMin <=MaxRaysPerAxii){
    RaySize = SizeToQuality(xysum((vec2(1)-mask) * RaysForPlane));
    return RaysForPlane; // Small object
   }



   // floor(MaxRaysPerPlane / ((1-mask.x) * RaysForPlane.x + (1-mask.y) * RaysForPlane.y));

    float ScalingMin = MaxRaysPerPlane / min(RaysForPlane.x,RaysForPlane.y); // Budget left for max // is this a floating point division
    float ScalingMax = MaxRaysPerAxii / max(RaysForPlane.x,RaysForPlane.y); // How much to reduce by if both are large


    if(ScalingMin >= MaxRaysPerAxii){ // One axii is smaller than MinPerAxii, so scale other one up
        RaysForPlane = (1-mask) * RaysForPlane + mask * vec2(floor(ScalingMin));
        RaySize = SizeToQuality(xysum((vec2(1)-mask) * RaysForPlane));
        return RaysForPlane;
    }
    
    // Both are too large so scale down
    RaysForPlane = floor(RaysForPlane/ScalingMax);
    RaySize = SizeToQuality(xysum((vec2(1)-mask) * RaysForPlane));
    return RaysForPlane;
}

vec3 GetNormal(int rayID, vec4 rotation, int XPlane, int YPlane, int ZPlane){
    return (rotation * vec4(rayID < XPlane, rayID < XPlane + YPlane,rayID < XPlane + YPlane + ZPlane,0)).xyz;
}

layout (local_size_x = 1, local_size_y = 64, local_size_z = 1) in;
// shared memory for MAX POSSBILE RAY QUERIES
void main(){
    int entityID = int(gl_GlobalInvocationID.x);
    int rayID = int(gl_GlobalInvocationID.y);

    collisions[gl_WorkGroupID.x].ObjBID = NoCollision;

    if((IDs[gl_WorkGroupID.x/32] & (1<<(gl_WorkGroupID.x&31))) == 0) // bit isnt active
        return;
       

    Ray r;
    r.direction = normalize(PhysicsVec3[entityID + Velocity_NextFrame * MaxEntities]);


    // vec3 rotated_dimensions = traces.dimensions * rotations[objID];
    
    /// Calculate how many rays total this should emit
    // Assume both support maximum quality voxels.
    ivec3 RaysPer = ivec3(ceil(models[entity_models[entityID]].aabbdef.maximum/vec3(QualityToSize(1))));

    int RaySize;

    
    int XPlane = min(RaysPer.y*RaysPer.z, MaxRaysPerPlane);
    int YPlane = min(RaysPer.x*RaysPer.z, MaxRaysPerPlane);
    int ZPlane = min(RaysPer.x*RaysPer.y, MaxRaysPerPlane);
    {
    // Calculate which query this is
    ivec3 ptr = ivec3(0);
    ivec3 MaxedRaysPer = min(ivec3(MaxRaysPerAxii),RaysPer);
    vec3 RayStep = models[entity_models[entityID]].aabbdef.maximum/(RaysPer/MaxedRaysPer);

    HitDistances[rayID] = 9999999;

    vec2 PlaneAxii;
    // Calculate points to run query

    if(rayID < XPlane){
        PlaneAxii = MaxedOutPlaneRays(RaysPer.yz,models[entity_models[entityID]].aabbdef.maximum.yz,RaySize);

        ptr.x = (r.direction.x<0)? MaxedRaysPer.x - 1 : 0;
        
        ptr.y = rayID % MaxedRaysPer.y;
        ptr.z = (rayID - ptr.y *  MaxedRaysPer.y) % MaxedRaysPer.z;

      //  RaySize = min(ptr.y,ptr.z);
    } else if (rayID < XPlane + YPlane) {
        PlaneAxii = MaxedOutPlaneRays(RaysPer.yz,models[entity_models[entityID]].aabbdef.maximum.yz,RaySize);


        ptr.y = (r.direction.y<0)? MaxedRaysPer.y - 1 : 0;

        
        int tempID = rayID - XPlane;
        ptr.x = tempID % MaxedRaysPer.x;
        ptr.z = (tempID - ptr.x *  MaxedRaysPer.x) % MaxedRaysPer.z;
      //  RaySize = min(ptr.x,ptr.z);

    } else if (rayID < XPlane + YPlane + ZPlane){
        PlaneAxii = MaxedOutPlaneRays(RaysPer.yz,models[entity_models[entityID]].aabbdef.maximum.yz,RaySize);

        ptr.z = (r.direction.z<0)? MaxedRaysPer.z - 1 : 0;
       
        int tempID = rayID - XPlane - YPlane;
        ptr.x = tempID % MaxedRaysPer.x;
        ptr.y = (tempID - ptr.x *  MaxedRaysPer.x) % MaxedRaysPer.y;
     //   RaySize = min(ptr.x,ptr.z);
    }

    //vec3 RaysScaling = ptr / (RaysPer / MaxedRaysPer) * models[entity_models[entityID]].aabbdef.maximum;

    // Calculate Per Axii's Size


    // Rotate to world space
    vec4 rotated_ptr = vec4(ptr - models[entity_models[entityID]].aabbdef.maximum / 2,0);
    rotated_ptr = rotated_ptr * PhysicsVec4[entityID + Rotation_NextFrame * MaxEntities] + vec4(models[entity_models[entityID]].aabbdef.maximum,0) * PhysicsVec4[entityID + Rotation_NextFrame * MaxEntities] / 2;

    // Calculate the distance to the B collider, if > max distance ignore this ray


    r.position = rotated_ptr.xyz + PhysicsVec3[entityID + Position_PastFrame * MaxEntities];
    }
    {
    TracingPackage context = CreateTracingPackage(r);
    float distanceTravelled = 0;




    // Trace against self with ray opposite, if ray ever breaks distance to B + distance within self > max distance break and this fail collision query
    Ray SelfRay = r;
    SelfRay.direction = -r.direction;
    RayHit SelfHit;
    RayHit WorldHit;
    float max_distance = dot(PhysicsVec3[entityID + Velocity_NextFrame * MaxEntities],r.direction); // Get magnitude

    // TODO Introduce a bottom level mask that checks for anything within the lower level. To mimic ray size
    if(!RaytraceDispatch(r, max_distance, RaySize, context, distanceTravelled, WorldHit))
        return;
        
    if(distanceTravelled>max_distance)
        return;  // Other cubes collider is too far away
       

    
    // Trace Model, if ray breaks distance to B + distance within A Model + distance within B Model > max distance break and fail this collision query
   // if(!RaytraceDistanceLimited(r, context, MODELID, hit,  distanceTravelled, traces[gl_WorkGroupID.x].maxDistance, SelfHit))) // NEEDS ALTERING TO A MODEL TRACER
      //  return;

   // if(distanceTravelled>traces[gl_WorkGroupID.x].maxDistance)
     //   return;  // Other cubes collider is too far away

    SelfHit.position = r.position;

    HitDistances[rayID] = distanceTravelled;
    HitPosition[rayID] = WorldHit.position;
    SelfHitPosition[rayID] = SelfHit.position;
    }
    barrier();

    {   
    // Option A: 1 is smaller so take that one
    // Option B: they are about equal so average

    int ptrCount = 0;
    vec3 avgAPtr;
    vec3 avgBPtr;
    vec3 normal;
    float bestDistance = 9999;
    const float equality = 1/8.0;

        for(int i =0; i < 64; i++){

            if(HitDistances[i]<bestDistance - equality){
                avgAPtr = HitPosition[i];
                avgBPtr = SelfHitPosition[i];
                bestDistance = HitDistances[i];
                normal = GetNormal(i, PhysicsVec4[entityID + Rotation_NextFrame * MaxEntities], XPlane, YPlane, ZPlane);
                ptrCount= 1;
            }
            else if(HitDistances[i]<bestDistance + equality)
                avgAPtr += HitPosition[i];
                avgBPtr += SelfHitPosition[i];
                bestDistance = min(HitDistances[i],bestDistance);
                normal += GetNormal(i, PhysicsVec4[entityID + Rotation_NextFrame * MaxEntities], XPlane, YPlane, ZPlane);
                ptrCount += 1;
        }

    avgAPtr /= ptrCount;
    avgBPtr /= ptrCount;
    normal = normalize(normal);

    PhysicsRayCollision collision;
    collision.objA_position = avgAPtr;
    collision.objB_position = avgBPtr;
    collision.distanceToPosition = bestDistance; // unfinished need to fill out other values
    collision.normal = normal;
    collisions[gl_WorkGroupID.x] = collision;


    }
}