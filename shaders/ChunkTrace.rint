/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "raycommon.glsl"
#include "wavefront.glsl"

#include "ChunkGPUConst.h"
#include "VoxelBrick.h"

#include "Helpers/ChunkHeaders.glsl"
#include "Helpers/GPUMemory.glsl"
#include "Helpers/Rays.glsl"
#include "Helpers/RayMasks.glsl"

hitAttributeEXT RayHit attribs;

layout(set = 0, binding = eChunkHeaders, scalar) buffer Headers_ { ChunkHeader ChunkHeaders[]; };
layout(set = 0, binding = eChunkMemory,  scalar) buffer GPUMemory_ { VoxelBrick GPUMemory[]; };

layout(set = 0, binding = eTlasEntities) uniform accelerationStructureEXT EntityTlas;
layout(set = 0, binding = eTlasChunks) uniform accelerationStructureEXT ChunkTlas;

uint ptr_stack[MaxQuality+1];
ivec3 SVOPosition;
// X is starts at bit 0
// Y starts at bit 2
// Z starts at bit 4, staggering is intentional allowing for individual qualities to be picked out and merged
 uint current_childPtr;


//#Insert VolumeTracer.glsl

//#Insert SVORaytracer.glsl


void main()
{
	Ray ray;
	ray.position    = gl_WorldRayOriginEXT;
	ray.direction = gl_WorldRayDirectionEXT;


	TracingPackage info =  CreateTracingPackage(ray);

	vec3 position = GetEntry(gl_InstanceCustomIndexEXT,  info.inv_dir, ray);

	position += ray.direction * 1/32.0;

	int index = ChunkHeaderIndex(ivec3(position/chunk_dimensions));
	RayHit hit;
	ChunkHeader header = ChunkHeaders[gl_InstanceCustomIndexEXT];

	//attribs = position/vec3(256);
	//attribs = header.position/vec3(8);
	//reportIntersectionEXT(1,1);
	//return;


	for(int i = 0; i<64; i++){
		
		if(Raytrace(ray,info, gl_InstanceCustomIndexEXT, index, hit)) {
			reportIntersectionEXT(hit._distance,1);
			attribs = hit;
			return;
		} 
	/*
		if(position.y < 32.0)
		{
			reportIntersectionEXT(1,1);
			attribs = vec3(0,index,0)/512.0 * abba;
			return;
		}
		*/
		if(!TraceNext(ray, position, info, index))
			return;

		
	}

	//attribs = position/vec3(256);
	hit.blockID = 0;
	hit._distance = 10000.0;
	attribs = hit;
	reportIntersectionEXT(1,1);
}