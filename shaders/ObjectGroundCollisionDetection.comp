#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_ARB_shading_language_include  : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_shader_atomic_int64 : require

layout(set = 0, binding = 0)  buffer  velocityN{
    vec3 velocity;
};

layout(set = 1, binding = 0)  buffer  colliderN{
    vec3 colliders;
};

layout(set = 2, binding = 0)  buffer  activeN{
    int actives;
};

layout(set = 2, binding = 0)  buffer  physObjN{
    PhysicsObject physObj;
};

layout(set = 3, binding = 0)  buffer  collisionsN{
    PhysicsRayCollision[] collisions;
};


layout (push_constant) uniform constant
{
    int offset;
};

shared float HitDistances[64];
shared vec3 HitPosition[64];
shared vec3 SelfHitPosition[64];


layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main(){

    // make sure that object is active / under motion befor ground checks
    int active = gl_WorkGroupID.x;
    active/=32;
    if(!(actives[active]>>(gl_WorkGroupID - active*32)) & 1)
        return;

    /// Calculate how many rays total this should emit
    // Assume both support maximum quality voxels.
    vec3 RaysPer = models[A]/vec3(QualityToSize(1));

    const int MaxRaysPerPlane = 16;
    const int MaxRaysPerAxii = 4;

    int XPlane = min(RaysPer.y*RaysPer.z, MaxRaysPerPlane);
    int YPlane = min(RaysPer.x*RaysPer.z, MaxRaysPerPlane);
    int ZPlane = min(RaysPer.x*RaysPer.y, MaxRaysPerPlane);

    // Calculate which query this is
    vec3 ptr = vec3(0);
    vec3 MaxedRaysPer = min(vec3(MaxRaysPerAxii,RaysPer));
    

    HitDistances[rayID] = 9999999;

    

    // Calculate points to run query

    if(rayID < XPlane){
        ptr.x = (traces[gl_WorkGroupID.x].direction.x<0)? MaxedRaysPer.x - 1 : 0;
        
        ptr.y = rayID % MaxedRaysPer.y;
        ptr.z = (rayID - ptr.y *  MaxedRaysPer.y) % MaxedRaysPer.z;
    } else if (rayID < XPlane + YPlane) {
        ptr.x = (traces[gl_WorkGroupID.x].direction.y<0)? MaxedRaysPer.y - 1 : 0;

        
        int tempID = rayID - XPlane;
        ptr.x = tempID % MaxedRaysPer.x;
        ptr.z = (tempID - ptr.x *  MaxedRaysPer.x) % MaxedRaysPer.z;

    } else if (rayID < XPlane + YPlane + ZPlane){
        ptr.z = (traces[gl_WorkGroupID.x].direction.z<0)? MaxedRaysPer.z - 1 : 0;
       
        int tempID = rayID - XPlane - YPlane;
        ptr.x = tempID % MaxedRaysPer.x;
        ptr.y = (tempID - ptr.x *  MaxedRaysPer.x) % MaxedRaysPer.y;
    }

    vec3 RaysScaling = ptr / (RaysPer / MaxedRaysPer) * models[A];

    // Rotate to world space
    ptr -= dimensions / 2;
    vec3 rotated_ptr = ptr * rotations[A] + dimensions * rotations[A] / 2;

    // Calculate the distance to the B collider, if > max distance ignore this ray
    float distanceTravelled = 0;

    Ray r;
    r.position = rotated_ptr;
    r.direction = traces[gl_WorkGroupID.x].direction;

    TracingPackage context = CreateTracingPackage(r);

// Raytrace Ground
    if(!RaytraceDistanceLimited(SelfRay, CreateTracingPackage(SelfRay), MODELID, hit,  distanceTravelled, traces[gl_WorkGroupID.x].maxDistance, SelfHit))) // NEEDS ALTERING TO A MODEL TRACER
        return;

// Raytrace Self
    if(!RaytraceDistanceLimited(SelfRay, CreateTracingPackage(SelfRay), MODELID, hit,  distanceTravelled, traces[gl_WorkGroupID.x].maxDistance, SelfHit))) // NEEDS ALTERING TO A MODEL TRACER
            return;

             HitDistances[rayID] = distanceTravelled;

    barrier();

    {   
    // Option A: 1 is smaller so take that one
    // Option B: they are about equal so average

    int ptrCount = 0;
    vec3 avgAPtr;
    vec3 avgBPtr;
    float bestDistance = 9999;
    const float equality = 1/8.0;

        for(int i =0; i < 64; i++){

            if(HitDistances[i]<bestDistance - equality){
                avgAPtr = HitPosition[i];
                avgBPtr = SelfHitPosition[i];
                bestDistance = HitDistances[i];
                ptrCount= 1;
            }
            else if(HitDistances[i]<bestDistance + equality)
                avgAPtr += HitPosition[i];
                avgBPtr += SelfHitPosition[i];
                bestDistance = min(HitDistances[i],bestDistance);
                ptrCount += 1;
        }

        avgAPtr /= ptrCount;
        avgBPtr /= ptrCount;

    PhysicsRayCollision collision;
    collision.objA_position = avgAPtr;
    collision.objB_position = avgBPtr;
    collision.distanceToPosition = bestDistance; // unfinished need to fill out other values

    collisions[gl_WorkGroupID.x] = collision;


    }

}